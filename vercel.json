"""
Farm AI Backend - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è Vercel
"""

from fastapi import FastAPI, Depends, HTTPException
from fastapi.responses import HTMLResponse, Response
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from sqlalchemy import Column, Integer, String, Float, Date, DateTime, Text, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from datetime import datetime, date
from typing import Optional, List
import google.generativeai as genai
import os

# FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="Farm AI Backend",
    description="AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–≤–∏–Ω–æ—Ñ–µ—Ä–º–∏",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏–∫–∞ –¥–ª—è —ñ–∫–æ–Ω–æ–∫ PWA (—ñ–∫–æ–Ω–∫–∏ –ø–æ–∫–ª–∞–¥–∏ —É backend/static/icons)
try:
    app.mount("/static", StaticFiles(directory="backend/static"), name="static")
except Exception:
    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —è–∫—â–æ –∫–∞—Ç–∞–ª–æ–≥—É –Ω–µ–º–∞—î
    pass

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
Base = declarative_base()
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./farm.db")
engine = create_engine(
    DATABASE_URL,
    connect_args={"check_same_thread": False} if "sqlite" in DATABASE_URL else {}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# AI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-pro')
else:
    model = None

# –ú–æ–¥–µ–ª—ñ
class Sow(Base):
    __tablename__ = "sows"
    
    id = Column(Integer, primary_key=True, index=True)
    number = Column(String(50), unique=True, nullable=False, index=True)
    birth_date = Column(Date, nullable=False)
    status = Column(String(20), default="–∞–∫—Ç–∏–≤–Ω–∞")
    notes = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def to_dict(self):
        return {
            "id": self.id,
            "number": self.number,
            "birth_date": self.birth_date.isoformat() if self.birth_date else None,
            "status": self.status,
            "notes": self.notes,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }

class WeeklyRecord(Base):
    __tablename__ = "weekly_records"
    
    id = Column(Integer, primary_key=True, index=True)
    week_start_date = Column(Date, nullable=False, unique=True, index=True)
    farrowings = Column(Integer, default=0)
    piglets_born_alive = Column(Integer, default=0)
    piglets_born_dead = Column(Integer, default=0)
    survival_rate = Column(Float, default=0.0)
    notes = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def calculate_survival_rate(self):
        total_born = self.piglets_born_alive + self.piglets_born_dead
        if total_born > 0:
            self.survival_rate = (self.piglets_born_alive / total_born) * 100
        else:
            self.survival_rate = 0.0

    def to_dict(self):
        return {
            "id": self.id,
            "week_start_date": self.week_start_date.isoformat() if self.week_start_date else None,
            "farrowings": self.farrowings,
            "piglets_born_alive": self.piglets_born_alive,
            "piglets_born_dead": self.piglets_born_dead,
            "survival_rate": round(self.survival_rate, 2),
            "notes": self.notes,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }

# Pydantic —Å—Ö–µ–º–∏
class WeeklyRecordCreate(BaseModel):
    week_start_date: date
    farrowings: int = Field(ge=0)
    piglets_born_alive: int = Field(ge=0)
    piglets_born_dead: int = Field(ge=0)
    notes: Optional[str] = None

class SowCreate(BaseModel):
    number: str = Field(..., min_length=1)
    birth_date: date
    status: str = Field(default="–∞–∫—Ç–∏–≤–Ω–∞")
    notes: Optional[str] = None

class ChatRequest(BaseModel):
    message: str = Field(..., min_length=1)
    include_context: bool = Field(default=True)

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
@app.on_event("startup")
async def startup_event():
    Base.metadata.create_all(bind=engine)
    print("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä —Ç–∞ –ë–î –≥–æ—Ç–æ–≤—ñ!")

# Endpoints
@app.get("/")
async def root():
    """HTML + PWA —Å—Ç–∞—Ä—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return HTMLResponse("""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üê∑ Farm AI</title>
    <meta name="theme-color" content="#667eea">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="manifest" href="/manifest.json">
    <link rel="apple-touch-icon" href="/static/icons/icon-192.png">
    <style>
        body { 
            margin: 0; padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; font-family: Arial; min-height: 100vh;
        }
        .container { max-width: 600px; margin: 0 auto; text-align: center; }
        .card { 
            background: rgba(255,255,255,0.1); padding: 30px; 
            border-radius: 20px; margin: 20px 0; backdrop-filter: blur(10px);
        }
        h1 { font-size: 2.5em; margin-bottom: 10px; }
        .status { 
            background: rgba(0,255,0,0.2); padding: 15px; 
            border-radius: 10px; margin: 20px 0; font-size: 1.2em;
        }
        .actions { display:flex; gap:10px; justify-content:center; flex-wrap:wrap; margin-top: 10px; }
        .btn { background:#111827; color:white; border:1px solid #374151; padding:10px 16px; border-radius:10px; cursor:pointer; }
        .btn.primary { background:#2563eb; border-color:#1d4ed8; }
        .toast { position: fixed; bottom: 16px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.75); color: #fff; padding: 10px 14px; border-radius: 8px; font-size: 14px; display:none; }
    </style>
    <link rel="preload" href="/sw.js" as="script" crossorigin>
    <meta http-equiv="Cache-Control" content="no-store" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <meta name="description" content="–°–∏—Å—Ç–µ–º–∞ –æ–±–ª—ñ–∫—É —Å–≤–∏–Ω–æ—Ñ–µ—Ä–º–∏" />
    <meta name="apple-mobile-web-app-title" content="Farm AI" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <link rel="apple-touch-icon" sizes="192x192" href="/static/icons/icon-192.png" />
    <link rel="apple-touch-icon" sizes="512x512" href="/static/icons/icon-512.png" />
    <meta name="apple-mobile-web-app-status-bar" content="#667eea" />
    <meta name="theme-color" content="#667eea" />
    <meta name="application-name" content="Farm AI" />
    <meta name="apple-mobile-web-app-title" content="Farm AI" />
</head>
<body>
    <div class="container">
        <div class="card">
            <h1>üê∑ Farm AI Chat</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ –æ–±–ª—ñ–∫—É —Å–≤–∏–Ω–æ—Ñ–µ—Ä–º–∏</p>
            <div class="status">‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏</div>
            <div class="actions">
                <button id="installBtn" class="btn primary" style="display:none">‚¨áÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —è–∫ –¥–æ–¥–∞—Ç–æ–∫</button>
                <button id="refreshBtn" class="btn">üîÑ –û–Ω–æ–≤–∏—Ç–∏</button>
            </div>
        </div>
    </div>
    <div id="toast" class="toast"></div>
    <script>
        function showToast(msg) {
            const el = document.getElementById('toast');
            el.textContent = msg; el.style.display = 'block';
            setTimeout(() => el.style.display = 'none', 2500);
        }
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async () => {
                try {
                    const reg = await navigator.serviceWorker.register('/sw.js');
                    reg.update().catch(()=>{});
                    reg.addEventListener('updatefound', () => {
                        const nw = reg.installing; if (!nw) return;
                        nw.addEventListener('statechange', () => {
                            if (nw.state === 'installed' && navigator.serviceWorker.controller) {
                                showToast('–î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—é...');
                                setTimeout(() => window.location.reload(), 500);
                            }
                        });
                    });
                    let refreshing = false;
                    navigator.serviceWorker.addEventListener('controllerchange', () => {
                        if (refreshing) return; refreshing = true; window.location.reload();
                    });
                } catch (e) { console.log('SW error', e); }
            });
        }
        let deferredPrompt = null;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault(); deferredPrompt = e;
            document.getElementById('installBtn').style.display = 'inline-block';
        });
        document.getElementById('installBtn').addEventListener('click', async () => {
            if (!deferredPrompt) return; deferredPrompt.prompt();
            const { outcome } = await deferredPrompt.userChoice;
            if (outcome === 'accepted') showToast('–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
            deferredPrompt = null;
        });
        document.getElementById('refreshBtn').addEventListener('click', () => window.location.reload());
    </script>
</body>
</html>""")

@app.head("/")
async def root_head():
    return Response(status_code=200)

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "database": "connected",
        "ai": "ready" if model else "no_api_key"
    }

@app.get("/healthz")
async def healthz_check():
    """Alias for platform health checks (Render default: /healthz)."""
    return {
        "status": "healthy",
        "database": "connected",
        "ai": "ready" if model else "no_api_key"
    }

# ===================== PWA endpoints =====================
@app.get("/manifest.json")
async def manifest():
    manifest = {
        "name": "Farm AI Chat",
        "short_name": "Farm AI",
        "start_url": "/",
        "scope": "/",
        "display": "standalone",
        "background_color": "#1f2937",
        "theme_color": "#667eea",
        "icons": [
            {"src": "/static/icons/icon-192.png", "sizes": "192x192", "type": "image/png"},
            {"src": "/static/icons/icon-512.png", "sizes": "512x512", "type": "image/png"}
        ]
    }
    import json
    return Response(content=json.dumps(manifest), media_type="application/manifest+json", headers={"Cache-Control": "no-cache"})

@app.get("/offline")
async def offline_page():
    return HTMLResponse("""
    <!DOCTYPE html>
    <html><head><meta charset='utf-8'><meta name='viewport' content='width=device-width, initial-scale=1'>
    <title>Farm AI ‚Äî Offline</title>
    <style>body{background:#111;color:#eee;font-family:Arial;margin:0;padding:24px} .box{max-width:600px;margin:0 auto;text-align:center;background:#1f2937;padding:24px;border-radius:12px} a{color:#93c5fd}</style>
    </head><body>
    <div class='box'>
      <h2>üîå –ù–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É</h2>
      <p>–î–æ–¥–∞—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑ º—è–≤–∏—Ç—å—Å—è –º–µ—Ä–µ–∂–∞ ‚Äî –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.</p>
      <p><a href="/">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</a></p>
    </div>
    </body></html>
    """)

@app.get("/sw.js")
async def service_worker():
    sw_code = r"""
        const CACHE = 'farm-ai-v1';
        const APP_SHELL = ['/', '/manifest.json', '/offline'];

        self.addEventListener('install', (event) => {
            self.skipWaiting();
            event.waitUntil(
                caches.open(CACHE).then(cache => cache.addAll(APP_SHELL))
            );
        });

        self.addEventListener('activate', (event) => {
            event.waitUntil(
                (async () => {
                    const keys = await caches.keys();
                    await Promise.all(keys.filter(k => k !== CACHE).map(k => caches.delete(k)));
                    await self.clients.claim();
                })()
            );
        });

        self.addEventListener('fetch', (event) => {
            const req = event.request;
            const url = new URL(req.url);

            if (req.mode === 'navigate') {
                event.respondWith(
                    (async () => {
                        try {
                            const fresh = await fetch(req);
                            const cache = await caches.open(CACHE);
                            cache.put('/', fresh.clone());
                            return fresh;
                        } catch (e) {
                            const cache = await caches.open(CACHE);
                            const cached = await cache.match('/');
                            return cached || cache.match('/offline');
                        }
                    })()
                );
                return;
            }

            if (url.origin === location.origin) {
                event.respondWith(
                    caches.match(req).then(cached => {
                        const network = fetch(req).then(res => {
                            caches.open(CACHE).then(cache => cache.put(req, res.clone()));
                            return res;
                        }).catch(() => cached);
                        return cached || network;
                    })
                );
            }
        });
    """
    return Response(content=sw_code, media_type="text/javascript", headers={"Cache-Control": "no-cache"})

@app.get("/api/weekly-records")
async def get_weekly_records(db: Session = Depends(get_db)):
    records = db.query(WeeklyRecord).order_by(WeeklyRecord.week_start_date.desc()).all()
    return [record.to_dict() for record in records]

@app.post("/api/weekly-records")
async def create_weekly_record(record: WeeklyRecordCreate, db: Session = Depends(get_db)):
    existing = db.query(WeeklyRecord).filter(
        WeeklyRecord.week_start_date == record.week_start_date
    ).first()
    
    if existing:
        raise HTTPException(status_code=400, detail=f"–ó–∞–ø–∏—Å –¥–ª—è {record.week_start_date} –≤–∂–µ —ñ—Å–Ω—É—î")
    
    db_record = WeeklyRecord(
        week_start_date=record.week_start_date,
        farrowings=record.farrowings,
        piglets_born_alive=record.piglets_born_alive,
        piglets_born_dead=record.piglets_born_dead,
        notes=record.notes
    )
    db_record.calculate_survival_rate()
    
    db.add(db_record)
    db.commit()
    db.refresh(db_record)
    
    return db_record.to_dict()

@app.get("/api/sows")
async def get_sows(db: Session = Depends(get_db)):
    sows = db.query(Sow).order_by(Sow.number).all()
    return [sow.to_dict() for sow in sows]

@app.post("/api/sows")
async def create_sow(sow: SowCreate, db: Session = Depends(get_db)):
    existing = db.query(Sow).filter(Sow.number == sow.number).first()
    if existing:
        raise HTTPException(status_code=400, detail=f"–°–≤–∏–Ω–æ–º–∞—Ç–∫–∞ {sow.number} –≤–∂–µ —ñ—Å–Ω—É—î")
    
    db_sow = Sow(
        number=sow.number,
        birth_date=sow.birth_date,
        status=sow.status,
        notes=sow.notes
    )
    
    db.add(db_sow)
    db.commit()
    db.refresh(db_sow)
    
    return db_sow.to_dict()

@app.post("/api/chat")
async def chat_with_ai(request: ChatRequest, db: Session = Depends(get_db)):
    if not model:
        raise HTTPException(status_code=503, detail="AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ GEMINI_API_KEY")
    
    try:
        context = ""
        if request.include_context:
            recent_records = db.query(WeeklyRecord).order_by(
                WeeklyRecord.week_start_date.desc()
            ).limit(5).all()
            
            active_sows = db.query(Sow).filter(Sow.status == "–∞–∫—Ç–∏–≤–Ω–∞").count()
            
            context = f"""
–î–∞–Ω—ñ —Ñ–µ—Ä–º–∏:
- –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–≤–∏–Ω–æ–º–∞—Ç–æ–∫: {active_sows}
- –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏: {len(recent_records)} —Ç–∏–∂–Ω—ñ–≤

–û—Å—Ç–∞–Ω–Ω—ñ —Ç–∏–∂–Ω–µ–≤—ñ –¥–∞–Ω—ñ:
"""
            for record in recent_records:
                context += f"- {record.week_start_date}: {record.farrowings} –æ–ø–æ—Ä–æ—Å—ñ–≤, –≤–∏–∂–∏–≤–∞–Ω—ñ—Å—Ç—å {record.survival_rate:.1f}%\n"
        
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–≤–∏–Ω–æ—Ñ–µ—Ä–º–æ—é. 
–ê–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ —Ç–∞ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º."""
        
        full_prompt = f"{system_prompt}\n\n{context}–ü–∏—Ç–∞–Ω–Ω—è: {request.message}"
        
        response = model.generate_content(full_prompt)
        
        return {
            "response": response.text,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ AI: {str(e)}")

# –î–ª—è Vercel (–í–ê–ñ–õ–ò–í–û!)
handler = app
